// used for symlinking
import java.nio.file.*

class MockModule {
    String baseName
    String sdkVersion = null
    List<String> scalaVersions = null
}

class IcebergAddonModule {
    String baseName
    List<String> scalaVersions = null
    Boolean separateTestModule = false
    List<String> separateTestModuleScalaVersions = null
    Boolean spark2TestModule = false
}


void includeCrossBuildModules(
        String baseModuleName,
        String relativePath,
        List<String> scalaVersions,
        Boolean useSymlinks) {

    if (scalaVersions == null) {
        def moduleName = baseModuleName

        include moduleName
        project(":${moduleName}").setProjectDir(new File(settingsDir, relativePath))
    } else {
        def moduleNeedsSymlink = useSymlinks && scalaVersions.size() > 1
        scalaVersions.each { scalaVersion ->
            def moduleName = baseModuleName + "_" + scalaVersion

            /**
             * If useSymlinks, add a symlink from an adjacent file with version to the main directory.
             * This tricks intellij into thinking that the modules don't have overlapping content roots.
             * Without this, intellij will just get rid of some of the modules.
             *
             * If not useSymlinks, delete all the existing ones
             */
            def symlinkPath = relativePath + "_" + scalaVersion
            def link = settingsDir.toPath().resolve(symlinkPath)

            if (moduleNeedsSymlink && scalaVersions.size() > 1 && !Files.isSymbolicLink(link)) {
                Files.createSymbolicLink(link, settingsDir.toPath().resolve(relativePath))
            } else if (!moduleNeedsSymlink && Files.exists(link) && Files.isSymbolicLink(link)) {
                Files.delete(link)
            }

            def contentRoot = (moduleNeedsSymlink) ? symlinkPath : relativePath

            include moduleName
            project(":${moduleName}").setProjectDir(new File(settingsDir, contentRoot))
        }
    }

}

/**
 * Using symlinks will let intellij process this repo.
 * Flag that you want symlinks by touching use_symlinks in the root directory.
 */
Boolean useSymlinks = Files.exists(settingsDir.toPath().resolve("use_symlinks"))


include 'bom'
include 'util'

include 'test-bom'
include 'test-util'

List<MockModule> mockModules = [
        new IcebergAddonModule(baseName: "catalog"),
        new IcebergAddonModule(baseName: "source", scalaVersions: ["2.11"]),

        new IcebergAddonModule(baseName: "testkit"),
        new IcebergAddonModule(baseName: "spark-testkit", scalaVersions: ["2.11"]),
]

List<IcebergAddonModule> icebergAddonModules = [
        new IcebergAddonModule(baseName: "catalog-lite"),
        //new IcebergAddonModule(baseName: "crypto"),
        //new IcebergAddonModule(baseName: "client"),
]

includeCrossBuildModules(
        'spark2-mock-tests',
        'spark2-mock-tests',
        ['2.11'],
        useSymlinks)

mockModules.each { mockModule ->
    def prefix = "mock-"
    def moduleName = prefix + mockModule.baseName
    def relativePath = "mock/" + mockModule.baseName

    includeCrossBuildModules(
            moduleName,
            relativePath,
            mockModule.scalaVersions,
            useSymlinks)
}

icebergAddonModules.each { icebergAddon ->
    def prefix = "iceberg-addon-"
    def moduleName = prefix + icebergAddon.baseName
    def relativePath = icebergAddon.baseName

    includeCrossBuildModules(
            moduleName,
            relativePath,
            icebergAddon.scalaVersions,
            useSymlinks)

    if (icebergAddon.separateTestModule) {
        def testSuffix = "-mock-tests"
        def testModuleName = moduleName + testSuffix
        def testRelativePath = icebergAddon.baseName + testSuffix
        includeCrossBuildModules(
                testModuleName,
                testRelativePath,
                icebergAddon.separateTestModuleScalaVersions ?
                        icebergAddon.separateTestModuleScalaVersions :
                        icebergAddon.scalaVersions,
                useSymlinks)
    }

    if (icebergAddon.spark2TestModule) {
        def testSuffix = "-spark-tests"
        def testModuleName = moduleName + testSuffix
        def testRelativePath = icebergAddon.baseName + testSuffix
        includeCrossBuildModules(
                testModuleName,
                testRelativePath,
                icebergAddon.scalaVersions,
                useSymlinks)
    }
}
