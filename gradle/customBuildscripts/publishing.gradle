/**
 * Used for publishing java-libraries and java-platforms.
 */

apply from: "${rootDir}/gradle/customBuildscripts/util.gradle"
apply plugin: 'maven-publish'
apply plugin: 'signing'

/*
 * TODO add source and test artifacts to publications in a way that works with
 *  the scala plugin.
 */
/*
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier 'tests'
    from sourceSets.test.output.getClassesDirs()
}
 */

publishing.repositories {
    /**
     * Creates two repos named "release" and "snapshot".
     *
     * this creates the following important publishing tasks based on naming convention:
     *  publishAllPublicationsToSnapshotRepository
     *  publishAllPublicationsToReleaseRepository
     *
     * the jenkins job will pick to publish either one of these
     */
    boxJfrog('release', 'box-maven-releases', it)
    boxJfrog('snapshot', 'box-maven-snapshots', it)
}

/**
 * TODO: currently the pom this publishes for snapshots ends up in a path in artifactory
 * which the box sbt plugin can't handle. Figure out a hack around this.
 *
 * Also, it's not clear if the poms that are published by this only work with gradle due
 * to the custom constraints/boms.
 */
publishing.publications {
    // publish java library artifacts if the project is a java library
    if (plugins.hasPlugin('java-library')) mavenJava(MavenPublication) {
        from components.java
        afterEvaluate {
            version = jar.getArchiveVersion().get()
        }
    }

    // publish java platform artifacts if the project is a java platform
    if (plugins.hasPlugin('java-platform')) myPlatform(MavenPublication) {
        from components.javaPlatform
    }
}

/**
 * Signing is a method of adding authentication to artifacts in maven.
 *
 * Box uses a method which relis on gpg keys. It's kind of a pain to set one up
 * and use it locally, so we will provide a system property to skip signing.
 *
 * This way jenkins will still sign by default but locally we don't have to sign locally.
 */
tasks.withType(Sign) {
    onlyIf { !System.getProperty("skipSign") }
}

signing {
    useGpgCmd()

    // sign java libraries if the project is a java library
    if (plugins.hasPlugin('java-library'))
        sign publishing.publications.mavenJava

    // sign java platforms (aka boms) if the project is a java platform
    if (plugins.hasPlugin('java-platform'))
        sign publishing.publications.myPlatform
}

// TODO don't verify dependencies locally. Also maybe verify dependent poms?
if (plugins.hasPlugin('java-library')) verifyDependencies()

// apply and use the monaco signature verification plugin.
def verifyDependencies() {
    apply plugin: 'monaco-signature-verification'

    signatureVerification {
        username "${artifactory_user}"
        password "${artifactory_password}"
        publicKeyPath "${rootDir}/gradle/keys/jenkins.gpg"
    }
}
