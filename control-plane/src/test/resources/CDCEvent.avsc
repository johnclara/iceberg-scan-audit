{"type":"record","name":"CDCEvent","namespace":"com.box.dseschema.cdc.credence","fields":[{"name":"event_metadata","type":{"type":"record","name":"EventMetadata","namespace":"com.box.dseschema.common","fields":[{"name":"event_timestamp","type":"long"},{"name":"event_id","type":{"type":"string","avro.java.string":"String"}},{"name":"test_tag","type":["null",{"type":"string","avro.java.string":"String"}],"default":null}]}},{"name":"cdc_metadata","type":{"type":"record","name":"CDCMetadata","doc":"This record holds the metadata of the event source","fields":[{"name":"entity_id","type":{"type":"string","avro.java.string":"String"},"doc":"The entity id of the modified entity as a string."},{"name":"entity_type","type":{"type":"string","avro.java.string":"String"},"doc":"The entity type of the modified entity."},{"name":"shard_id","type":["null","int"],"doc":"The resident shard of which the entity modified by this event was on.","default":null},{"name":"version_epoch","type":"long","doc":"The version epoch is a monotonically increasing integral marker of event order. The value is incremented everytime an entity is mutated. Consumers can use this value as an indicator of relative freshness in cases when order of event processing is important."},{"name":"source","type":{"type":"enum","name":"Source","symbols":["CREDENCE","BOOTSTRAP","BINLOG"]}},{"name":"actor","type":["null",{"type":"record","name":"ActorMetadata","doc":"This record holds metadata about the data access application that triggered the modification. The key is expected to be missing for bootstrap insert events that weren't triggered by an application.\\n\\nNote: Data contained in the subkey is for informational and possibly troubleshooting purposes. Please, don't rely on it in your code.","fields":[{"name":"app_name","type":{"type":"string","avro.java.string":"String"},"doc":"The name of the application."},{"name":"app_version","type":{"type":"string","avro.java.string":"String"},"doc":"The version of the application."},{"name":"request_id","type":["null",{"type":"string","avro.java.string":"String"}],"doc":"The request id in the context of the application that triggered the modification.","default":null},{"name":"client_id","type":["null",{"type":"string","avro.java.string":"String"}],"doc":"The client id (runmode) in the context of the application that triggered the modification.","default":null},{"name":"api_name","type":["null",{"type":"string","avro.java.string":"String"}],"doc":"The Credence API that generated this event.","default":null},{"name":"host","type":["null",{"type":"string","avro.java.string":"String"}],"doc":"The hostname of the server running the application.","default":null},{"name":"dc","type":["null",{"type":"string","avro.java.string":"String"}],"doc":"The DC that housed the server running the application.","default":null}]}],"doc":"This field holds the metadata about the data access application that triggered the modification. Expected to be null for bootstrap insert events.","default":null},{"name":"src_binlog","type":["null",{"type":"record","name":"SourceBinlogMetadata","doc":"The record holds information about the binlog this event came from. May be missing in the early stages of CDC development when events are emitted by Credence directly.\\n\\nNote: Data contained in the subkey is for informational and possibly troubleshooting purposes. Please, don't rely on it in your code.","fields":[{"name":"host","type":{"type":"string","avro.java.string":"String"},"doc":"The hostname of the server running the database the event came from."},{"name":"port","type":"int","doc":"The listening port of the database the event came from."},{"name":"dc","type":["null",{"type":"string","avro.java.string":"String"}],"doc":"The data center that housed the server running the database.","default":null},{"name":"physical_db_name","type":{"type":"string","avro.java.string":"String"},"doc":"The schema name of the database the event came from."},{"name":"logical_db_name","type":["null",{"type":"string","avro.java.string":"String"}],"doc":"The name of the appconf stanza representing the database in database_physical.conf.","default":null}]}],"doc":"This field holds the metadata about the binlog this event came from. Expected to be null for direct credene events and bootstrap insert events","default":null},{"name":"bootstrap_actor","type":["null",{"type":"record","name":"BootstrapActorMetadata","doc":"This record holds information about the bootstrap process that this event came from.\\n\\nNote: Data contained in the subkey is for informational and possibly troubleshooting purposes. Please, don't rely on it in your code.","fields":[{"name":"app_name","type":{"type":"string","avro.java.string":"String"},"doc":"The name of the bootstrap application."},{"name":"app_version","type":{"type":"string","avro.java.string":"String"},"doc":"The version of the bootstrap application."},{"name":"bootstrap_version_epoch","type":"long","doc":"The version epoch is a monotonically increasing integral marker of CDC bootstrap process. The value is incremented everytime a new CDC bootstrap job is run."}]}],"doc":"This field holds the metadata about the bootstrap process that thsi insert event came from. Expected to null for direct credence event and binlog cdc event","default":null}]},"doc":"The meta field holds some metadata about the event."},{"name":"operation","type":{"type":"enum","name":"Operation","symbols":["INSERT","UPDATE","DELETE"]}},{"name":"pre","type":["null",{"type":"record","name":"EntitySnapshot","doc":"The record holds the snapshot of the entity before the change was performed. Expected to be missing in case when the event represents an insert.","fields":[{"name":"entity_state","type":{"type":"map","values":["null","boolean","int","long","float","double","bytes",{"type":"string","avro.java.string":"String"}],"avro.java.string":"String"},"doc":"The state of the entity as a map before the mutation. All column names will be string keys in the map. Values will be values and Credence types are mapped to JSON types as expected. Note that some type information is lost as all numeric Credence types map to JSON numbers. \\n\\nNote: that null values are expected to be preserved in this map, so that consumers don't need any additional data to get a rough understanding of the entity's schema."}]}],"doc":"The pre encapsulates the snapshot of the entity before the change was performed. Expected to be missing in case when the event represents an insert.","default":null},{"name":"diff","type":["null",{"type":"record","name":"EntityDiff","doc":"The record holds the diff applied to the entity by the modification that this event represents. Expected to be missing in case when the event represents a delete.","fields":[{"name":"entity_state","type":["null",{"type":"map","values":["null","boolean","int","long","float","double","bytes",{"type":"string","avro.java.string":"String"}],"avro.java.string":"String"}],"doc":"The fields encapsulated the diff applied to the entity by the modification that this event represents. All column names will be string keys in the map. Values will be values and Credence types are mapped to JSON types as expected. Note that some type information is lost as all numeric Credence types map to JSON numbers. \\n\\nNote: that null values are expected to be preserved in this map, so that consumers don't need any additional data to get a rough understanding of the entity's schema. Expected to be missing in case when the event represents an new entity primary key insert."}]}],"doc":"The diff encapsulate the diff applied to the entity by the modification that this event represents. Expected to be missing in case when the event represents a delete.","default":null}]}